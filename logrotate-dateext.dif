--- config.c
+++ config.c
@@ -441,6 +441,14 @@
 		newlog->flags &= ~LOG_FLAG_IFEMPTY;
 
 		*endtag = oldchar, start = endtag;
+	    } else if (!strcmp(start, "dateext")) {
+		newlog->flags |= LOG_FLAG_DATEEXT;
+
+		*endtag = oldchar, start = endtag;
+	    } else if (!strcmp(start, "nodateext")) {
+		newlog->flags &= ~LOG_FLAG_DATEEXT;
+
+		*endtag = oldchar, start = endtag;
 	    } else if (!strcmp(start, "noolddir")) {
 		newlog->oldDir = NULL;
 
--- logrotate.8
+++ logrotate.8
@@ -200,6 +200,11 @@
 Log files are rotated every day.
 
 .TP
+\fBdateext\fR
+Archive old versions of log files adding a daily extension like YYYYMMDD
+instead of simply adding a number.
+
+.TP
 \fBdelaycompress\fR
 Postpone compression of the previous log file to the next rotation cycle.
 This has only effect when used in combination with \fBcompress\fR.
--- logrotate.c
+++ logrotate.c
@@ -11,6 +11,7 @@
 #include <sys/wait.h>
 #include <time.h>
 #include <unistd.h>
+#include <glob.h>
 
 #ifdef WITH_SELINUX
 #include <selinux/selinux.h>
@@ -22,6 +23,10 @@
 #include "log.h"
 #include "logrotate.h"
 
+#if !defined(GLOB_ABORTED) && defined(GLOB_ABEND)
+#define GLOB_ABORTED GLOB_ABEND
+#endif
+
 typedef struct {
     char * fn;
     struct tm lastRotated;	/* only tm.mon, tm_mday, tm_year are good! */
@@ -42,6 +47,14 @@
 char * mailCommand = DEFAULT_MAIL_COMMAND;
 time_t nowSecs = 0;
 
+static int globerr(const char * pathname, int theerr) {
+    message(MESS_ERROR, "error accessing %s: %s\n", pathname, 
+	    strerror(theerr));
+
+    /* We want the glob operation to continue, so return 0 */
+    return 1;
+}
+
 static logState * findState(const char * fn, struct stateSet * sip) {
     int i;
     logState * states = sip->states;
@@ -49,9 +62,11 @@
     struct tm now = *localtime(&nowSecs);
     time_t lr_time;
 
+    /* find the filename fn in the statesPtr list */
     for (i = 0; i < numStates; i++) 
 	if (!strcmp(fn, states[i].fn)) break;
 
+    /* not in statesPtr list, so add new entry */
     if (i == numStates) {
 	i = numStates++;
 	states = realloc(states, sizeof(*states) * numStates);
@@ -458,6 +473,9 @@
     char * baseName;
     char * dirName;
     char * firstRotated;
+    char * glob_pattern;
+    glob_t globResult;
+    int rc;
     size_t alloc_size;
     int rotateCount = log->rotateCount ? log->rotateCount : 1;
     int logStart = (log->logStart == -1) ? 1 : log->logStart;
@@ -488,7 +506,7 @@
 
     alloc_size = strlen(dirName) + strlen(baseName) + 
                  strlen(log->files[logNum]) + strlen(fileext) +
-                 strlen(compext) + 10;
+                 strlen(compext) + 18;
     
     oldName = alloca(alloc_size);
     newName = alloca(alloc_size);
@@ -512,27 +530,45 @@
         log->flags & LOG_FLAG_DELAYCOMPRESS) {
         struct stat sbprev;
 	
-        sprintf(oldName, "%s/%s.%d%s", dirName, baseName, logStart, fileext);
-        if (stat(oldName, &sbprev)) {
-            message(MESS_DEBUG, "previous log %s does not exist\n",
-		    oldName);
-        } else {
-	    hasErrors = compressLogFile(oldName, log);
+	if(log->flags & LOG_FLAG_DATEEXT) {
+	    /* glob for uncompressed files with our pattern */
+	    glob_pattern = malloc(strlen(dirName) + strlen(baseName)
+				  + strlen(fileext) + 44 );
+	    sprintf(glob_pattern,
+		    "%s/%s-[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]%s",
+		    dirName, baseName, fileext);
+	    rc = glob(glob_pattern, 0, globerr, &globResult);
+	    if (!rc && globResult.gl_pathc > 0) {
+		for (i = 0; i < globResult.gl_pathc && !hasErrors; i++) {
+		    sprintf(oldName,"%s",(globResult.gl_pathv)[i]);
+		    if (stat(oldName, &sbprev)) {
+			message(MESS_DEBUG, "previous log %s does not exist\n",
+			      oldName);
+		    } else {
+		        hasErrors = compressLogFile(oldName, log);
+		    }
+		}
+	    } else {
+		message (MESS_DEBUG, "glob finding logs to compress failed\n");
+		/* fallback to old behaviour */
+		sprintf(oldName, "%s/%s.%d%s", dirName, baseName, logStart, fileext);
+	    }
+	    globfree(&globResult);
+	    free(glob_pattern);
+	} else {
+	    sprintf(oldName, "%s/%s.%d%s", dirName, baseName, logStart, fileext);
+	    if (stat(oldName, &sbprev)) {
+		message(MESS_DEBUG, "previous log %s does not exist\n",
+		      oldName);
+	    } else {
+		hasErrors = compressLogFile(oldName, log);
+	    }
 	}
     }
     
-    sprintf(oldName, "%s/%s.%d%s%s", dirName, baseName,
-            logStart + rotateCount, fileext, compext);
-    strcpy(newName, oldName);
-    
-    strcpy(disposeName, oldName);
-    
     firstRotated = alloca(strlen(dirName) + strlen(baseName) +
                           strlen(fileext) + strlen(compext) + 30);
-    sprintf(firstRotated, "%s/%s.%d%s%s", dirName, baseName,
-            logStart, fileext, 
-	    (log->flags & LOG_FLAG_DELAYCOMPRESS) ? "" : compext);
-    
+
 #ifdef WITH_SELINUX
     if ((selinux_enabled=(is_selinux_enabled()>0))) {
       security_context_t oldContext=NULL;
@@ -558,6 +594,98 @@
       }
     }
 #endif
+
+    if(log->flags & LOG_FLAG_DATEEXT) {
+	/* glob for compressed files with our pattern
+	 * and compress ext */
+	glob_pattern = malloc(strlen(dirName)+strlen(baseName)
+			      +strlen(fileext)+strlen(compext)+44);
+	sprintf(glob_pattern,
+		"%s/%s-[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]%s%s",
+		dirName, baseName, fileext, compext);
+	rc = glob(glob_pattern, 0, globerr, &globResult);
+	if (!rc) {
+	    /* search for files to drop, if we find one remember it,
+	     * if we find another one mail and remove the first and
+	     * remember the second and so on */
+	    struct stat fst_buf;
+	    int mail_out = -1;
+	    /* remove the first (n - rotateCount) matches
+	     * no real rotation needed, since the files have
+	     * the date in their name */
+	     for (i = 0; i < globResult.gl_pathc; i++) {
+		if( !stat((globResult.gl_pathv)[i],&fst_buf) ) {
+		    if (i < ((int)globResult.gl_pathc - rotateCount - 1)) {
+			if ( mail_out != -1 ) {
+			    if (!hasErrors && log->logAddress) {
+				char * mailFilename;
+
+				if(log->flags & LOG_FLAG_MAILFIRST)
+				    mailFilename = NULL;
+				else
+				    mailFilename = (globResult.gl_pathv)[mail_out];
+				if(mailFilename) {
+				    /* if the log is compressed (and we're not mailing a
+				       file whose compression has been delayed), we need
+				       to uncompress it */
+				    if ((log->flags & LOG_FLAG_COMPRESS) &&
+					!((log->flags & LOG_FLAG_DELAYCOMPRESS) &&
+					  (log->flags & LOG_FLAG_MAILFIRST))) {
+					if (mailLog(mailFilename, mailCommand, 
+						log->uncompress_prog, log->logAddress, 
+						log->files[logNum])) 
+					    hasErrors = 1;
+				    } else {
+					if (mailLog(mailFilename, mailCommand, NULL, 
+					    log->logAddress, mailFilename))
+					    hasErrors = 1;
+				    }
+				}
+				if (!hasErrors) {
+				    message(MESS_DEBUG, "removing old log %s\n", 
+					(globResult.gl_pathv)[mail_out]);
+				    if(!debug && unlink((globResult.gl_pathv)[mail_out])) {
+					message(MESS_ERROR, "Failed to remove old log %s: %s\n",
+					    (globResult.gl_pathv)[mail_out], strerror(errno));
+					hasErrors = 1;
+				    }
+				}
+			    }
+			}
+			mail_out = i;
+		    }
+		}
+	    }
+	    if ( mail_out != -1 ) {
+		/* oldName is oldest Backup found (for unlink later) */
+		sprintf(oldName, "%s", (globResult.gl_pathv)[mail_out]);
+		strcpy(disposeName, oldName);
+	    } else
+		disposeName = NULL;
+	    /* firstRotated is most recently created/compressed rotated log */
+	    sprintf(firstRotated, "%s/%s-%04d%02d%02d%s%s",
+		    dirName, baseName, now.tm_year+1900,
+		    now.tm_mon+1, now.tm_mday, fileext, compext);
+	} else {
+	    message (MESS_DEBUG, "glob finding old rotated logs failed\n");
+	    disposeName = NULL;
+	}
+	/* firstRotated is most recently created/compressed rotated log */
+	/* copy these two out with strdup */
+	globfree(&globResult);
+	free(glob_pattern);
+    } else {
+
+    sprintf(oldName, "%s/%s.%d%s%s", dirName, baseName,
+            logStart + rotateCount, fileext, compext);
+    strcpy(newName, oldName);
+    
+    strcpy(disposeName, oldName);
+    
+    sprintf(firstRotated, "%s/%s.%d%s%s", dirName, baseName,
+            logStart, fileext, 
+	    (log->flags & LOG_FLAG_DELAYCOMPRESS) ? "" : compext);
+    
     for (i = rotateCount + logStart - 1; (i >= 0) && !hasErrors; i--) {
         tmp = newName;
         newName = oldName;
@@ -579,11 +707,27 @@
 	    }
 	}
     }
+    } /* !LOG_FLAG_DATEEXT */
     
     finalName = oldName;
+
     
-    /* note: the gzip extension is *not* used here! */
-    sprintf(finalName, "%s/%s.%d%s", dirName, baseName, logStart, fileext);
+    if(log->flags & LOG_FLAG_DATEEXT) {
+	char * destFile = alloca(strlen(dirName) + strlen(baseName) +
+				 strlen(fileext) + strlen(compext) + 30);
+	struct stat fst_buf;
+	sprintf(finalName, "%s/%s-%04d%02d%02d%s",
+		dirName, baseName, now.tm_year+1900,
+		now.tm_mon+1, now.tm_mday, fileext);
+	sprintf(destFile, "%s%s", finalName, compext);
+	if(!stat(destFile,&fst_buf)) {
+	    message (MESS_DEBUG, "destination %s already exists, skipping rotation\n", firstRotated);
+	    hasErrors = 1;
+	}
+    } else {
+	/* note: the gzip extension is *not* used here! */
+	sprintf(finalName, "%s/%s.%d%s", dirName, baseName, logStart, fileext);
+    }
     
     /* if the last rotation doesn't exist, that's okay */
     if (!debug && access(disposeName, F_OK)) {
@@ -592,9 +736,6 @@
         disposeName = NULL;
     } 
     
-    free(dirName);
-    free(baseName);
-    
     if (!hasErrors) {
         if (log->pre && !(log->flags & LOG_FLAG_SHAREDSCRIPTS)) {
             message(MESS_DEBUG, "running prerotate script\n");
@@ -740,6 +881,8 @@
 	  }
 	}
 #endif
+    free(dirName);
+    free(baseName);
     return hasErrors;
 }
 
--- logrotate.h
+++ logrotate.h
@@ -15,6 +15,7 @@
 #define LOG_FLAG_MAILFIRST	(1 << 6)
 #define LOG_FLAG_SHAREDSCRIPTS	(1 << 7)
 #define LOG_FLAG_COPY		(1 << 8)
+#define LOG_FLAG_DATEEXT	(1 << 9)
 
 #define NO_FORCE_ROTATE 0
 #define FORCE_ROTATE    1
